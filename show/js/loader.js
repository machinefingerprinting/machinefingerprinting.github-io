// Generated by CoffeeScript 1.10.0
(function() {
  var Loader, createCopyButton, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.createCopyButton = createCopyButton = function(text, home) {
    var clipboard;
    clipboard = new Clipboard('.btn');
    clipboard.on('success', function(e) {
      var trigger;
      e.clearSelection();
      trigger = $(e.trigger);
      if (trigger.attr('data-toggle') === 'tooltip') {
        trigger.attr('data-original-title', "Coppied").tooltip('fixTitle').tooltip('show');
        return setTimeout(function() {
          return trigger.tooltip('hide');
        }, 1000);
      }
    });
    clipboard.on('error', function(e) {
      var trigger;
      trigger = $(e.trigger);
      if (trigger.attr('data-toggle') === 'tooltip') {
        trigger.attr('data-original-title', "Press Cmd+C to copy").tooltip('fixTitle').tooltip('show');
        return setTimeout(function() {
          return trigger.tooltip('hide');
        }, 3000);
      }
    });
    return $("<button type='button' class='btn btn-default' data-clipboard-action='copy' data-clipboard-text='" + text + "' data-toggle='tooltip' data-trigger='manual' data-placement='auto' data-html='true' >Copy</button>").tooltip().appendTo($(home));
  };

  Loader = (function() {
    function Loader() {
      var colorName, colorName1, simpleName, susanName;
      this.parseURL();
      this.checkID();
      this.numberOfAssets = 0;
      this.numLoaded = 0;
      susanName = './assets/Susan.json';
      simpleName = './assets/simple.json';
      colorName = './assets/color.png';
      colorName1 = './assets/color2.png';
      this.loadJSONResource(susanName, (function(_this) {
        return function(err, susanModel) {
          _this.susanModel = susanModel;
          if (err) {
            alert('error getting susan model');
            console.log(err);
          } else {
            _this.assetLoaded();
          }
          return true;
        };
      })(this));
      this.loadJSONResource(simpleName, (function(_this) {
        return function(err, simpleModel) {
          _this.simpleModel = simpleModel;
          if (err) {
            alert('error getting simpleModel');
            console.log(err);
          } else {
            _this.assetLoaded();
          }
          return true;
        };
      })(this));
      this.loadImage(colorName, (function(_this) {
        return function(err, texture) {
          _this.texture = texture;
          if (err) {
            alert('error getting color.png');
            console.log(err);
          } else {
            _this.assetLoaded();
          }
          return true;
        };
      })(this));
      this.loadImage(colorName1, (function(_this) {
        return function(err, texture1) {
          _this.texture1 = texture1;
          if (err) {
            alert('error getting colors.png');
            console.log(err);
          } else {
            _this.assetLoaded();
          }
          return true;
        };
      })(this));
    }

    Loader.prototype.checkID = function() {
      var uid, user_id;
      if (this.requests['user_id'] == null) {
        uid = Cookies.get('machine_fingerprinting_userid');
        if (!uid && (this.requests['debug'] == null)) {
          window.location.href = error_page;
        }
        user_id = parseInt(uid);
        if (!this.commands) {
          this.parser.search = "?user_id=" + user_id + "&automated=false";
        } else {
          this.parser.search += "user_id=" + user_id;
        }
        this.url = this.parser.href;
      } else {
        user_id = parseInt(requests['user_id']);
      }
      window.url = this.url;
      return window.user_id = user_id;
    };

    Loader.prototype.parseURL = function() {
      var c, j, len, ref, seq;
      this.url = document.URL;
      this.parser = document.createElement('a');
      this.parser.href = this.url;
      this.commands = this.parser.search;
      this.requests = {};
      if (this.commands) {
        ref = this.commands.slice(1).split('&');
        for (j = 0, len = ref.length; j < len; j++) {
          c = ref[j];
          seq = c.split('=');
          this.requests[seq[0]] = seq[1];
        }
      }
      return window.requests = this.requests;
    };

    Loader.prototype.assetLoaded = function() {
      this.numLoaded++;
      if (this.numLoaded === this.numberOfAssets) {
        return this.beginTests();
      }
    };

    Loader.prototype.loadTextResource = function(url, callback) {
      var request;
      ++this.numberOfAssets;
      request = new XMLHttpRequest();
      request.open('GET', url + "?please-dont-cache=" + (Math.random()), true);
      request.onload = function() {
        if (request.status < 200 || request.status > 299) {
          return callback("Error: HTTP Status " + request.status + " on resource " + url);
        } else {
          return callback(null, request.responseText);
        }
      };
      request.send();
      return true;
    };

    Loader.prototype.loadImage = function(url, callback) {
      var image;
      ++this.numberOfAssets;
      image = new Image();
      image.onload = function() {
        return callback(null, image);
      };
      image.src = url;
      return true;
    };

    Loader.prototype.loadJSONResource = function(url, callback) {
      this.loadTextResource(url, function(err, result) {
        var e, error;
        if (err) {
          return callback(err);
        } else {
          try {
            return callback(null, JSON.parse(result));
          } catch (error) {
            e = error;
            return callback(e);
          }
        }
      });
      return true;
    };

    Loader.prototype.beginTests = function() {
      var Tester, i, index, j, k, l, len, maxFirst, postProgress, ref, ref1, ref2, ref3, ref4, ref5, sender, test, vert;
      this.susanVertices = this.susanModel.meshes[0].vertices;
      this.susanIndices = [].concat.apply([], this.susanModel.meshes[0].faces);
      this.susanTexCoords = this.susanModel.meshes[0].texturecoords[0];
      this.susanNormals = this.susanModel.meshes[0].normals;
      this.simpleVertices = (function() {
        var j, len, ref, results;
        ref = this.simpleModel.meshes[0].vertices;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          vert = ref[j];
          results.push(vert / 20.0);
        }
        return results;
      }).call(this);
      this.simpleIndices = [].concat.apply([], this.simpleModel.meshes[0].faces);
      this.simpleTexCoords = this.simpleModel.meshes[0].texturecoords[0];
      this.simpleNormals = this.simpleModel.meshes[0].normals;
      this.combinedVertices = new Array(this.simpleIndices.length + this.susanIndices.length);
      for (i = j = 0, ref = this.susanVertices.length; j < ref; i = j += 3) {
        this.combinedVertices[i + 0] = this.susanVertices[i + 0];
        this.combinedVertices[i + 1] = this.susanVertices[i + 1] + 1.3;
        this.combinedVertices[i + 2] = this.susanVertices[i + 2];
      }
      for (i = k = 0, ref1 = this.simpleVertices.length; k < ref1; i = k += 3) {
        this.combinedVertices[i + 0 + this.susanVertices.length] = this.simpleVertices[i + 0];
        this.combinedVertices[i + 1 + this.susanVertices.length] = this.simpleVertices[i + 1] - 1.3;
        this.combinedVertices[i + 2 + this.susanVertices.length] = this.simpleVertices[i + 2];
      }
      this.combinedIndices = new Array(this.simpleIndices.length + this.susanIndices.length);
      [].splice.apply(this.combinedIndices, [0, this.susanIndices.length - 0].concat(ref2 = this.susanIndices)), ref2;
      maxFirst = this.susanIndices.reduce(function(a, b) {
        return Math.max(a, b);
      });
      [].splice.apply(this.combinedIndices, [(ref3 = this.susanIndices.length), this.combinedIndices.length - ref3].concat(ref4 = (function() {
        var l, len, ref5, results;
        ref5 = this.simpleIndices;
        results = [];
        for (l = 0, len = ref5.length; l < len; l++) {
          index = ref5[l];
          results.push(index + 1 + maxFirst);
        }
        return results;
      }).call(this))), ref4;
      this.combinedTexCoords = this.susanTexCoords.concat(this.simpleTexCoords);
      this.combinedNormals = this.susanNormals.concat(this.simpleNormals);
      this.testList = [];
      window.sender = sender = new Sender();
      this.testList.push(new CubeTest());
      this.testList.push(new CameraTest());
      this.testList.push(new LineTest());
      this.testList.push(new TextureTest(this.susanVertices, this.susanIndices, this.susanTexCoords, this.texture));
      this.testList.push(new TextureTest(this.combinedVertices, this.combinedIndices, this.combinedTexCoords, this.texture));
      this.testList.push(new SimpleLightTest(this.susanVertices, this.susanIndices, this.susanTexCoords, this.susanNormals, this.texture));
      this.testList.push(new SimpleLightTest(this.combinedVertices, this.combinedIndices, this.combinedTexCoords, this.combinedNormals, this.texture));
      this.testList.push(new MoreLightTest(this.combinedVertices, this.combinedIndices, this.combinedTexCoords, this.combinedNormals, this.texture));
      this.testList.push(new TwoTexturesMoreLightTest(this.combinedVertices, this.combinedIndices, this.combinedTexCoords, this.combinedNormals, this.texture, this.texture1));
      this.testList.push(new TransparentTest(this.combinedVertices, this.combinedIndices, this.combinedTexCoords, this.combinedNormals, this.texture));
      this.testList.push(new LightingTest());
      this.testList.push(new ClippingTest());
      this.testList.push(new BubbleTest());
      this.testList.push(new CompressedTextureTest());
      this.testList.push(new ShadowTest());
      this.asyncTests = [];
      this.asyncTests.push(new VideoTest());
      this.asyncTests.push(new LanguageDector());
      sender.finalized = true;
      this.numberOfTests = this.testList.length + this.asyncTests.length;
      this.numComplete = 0;
      postProgress = (function(_this) {
        return function() {
          progress(++_this.numComplete / _this.numberOfTests * 98.0);
          if (_this.numComplete === _this.numberOfTests) {
            return sender.sendData();
          }
        };
      })(this);
      Tester = (function() {
        function Tester(testList, dest) {
          var testDone;
          this.testList = testList;
          this.canvas = $('<canvas width="256" height="256" />').appendTo(dest)[0];
          this.numTestsComplete = 0;
          testDone = (function(_this) {
            return function() {
              _this.numTestsComplete++;
              postProgress();
              if (_this.numTestsComplete < _this.testList.length) {
                return _this.testList[_this.numTestsComplete].begin(_this.canvas, testDone);
              }
            };
          })(this);
          this.testList[0].begin(this.canvas, testDone);
        }

        return Tester;

      })();
      new Tester(this.testList, $('#test_canvases'));
      ref5 = this.asyncTests;
      for (l = 0, len = ref5.length; l < len; l++) {
        test = ref5[l];
        test.begin(postProgress);
      }
      return true;
    };

    return Loader;

  })();

  $(function() {
    var loader;
    return loader = new Loader();
  });

}).call(this);
