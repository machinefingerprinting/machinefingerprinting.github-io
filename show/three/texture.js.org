if (!Detector.webgl)
  Detector.addGetWebGLMessage();

var camera, scene, renderer;
var meshes = [];

init();
animate();

function init() {

  camera = new THREE.PerspectiveCamera(60, 256 / 256, 1, 2000);
  camera.position.z = 1500;

  scene = new THREE.Scene();

  geometry = new THREE.BoxGeometry(100, 100, 100);

  /*
  This is how compressed textures are supposed to be used:

  DXT1 - RGB - opaque textures
  DXT3 - RGBA - transparent textures with sharp alpha transitions
  DXT5 - RGBA - transparent textures with full alpha range
  */

  var loader = new THREE.DDSLoader();

  var map1 = loader.load('textures/compressed/disturb_dxt1_nomip.dds');
  map1.minFilter = map1.magFilter = THREE.LinearFilter;
  map1.anisotropy = 4;

  var map2 = loader.load('textures/compressed/disturb_dxt1_mip.dds');
  map2.anisotropy = 4;

  var map3 = loader.load('textures/compressed/hepatica_dxt3_mip.dds');
  map3.anisotropy = 4;

  var map4 = loader.load('textures/compressed/explosion_dxt5_mip.dds');
  map4.anisotropy = 4;

  var map5 = loader.load('textures/compressed/disturb_argb_nomip.dds');
  map5.minFilter = map5.magFilter = THREE.LinearFilter;
  map5.anisotropy = 4;

  var map6 = loader.load('textures/compressed/disturb_argb_mip.dds');
  map6.anisotropy = 4;

  var cubemap1 =
      loader.load('textures/compressed/Mountains.dds', function(texture) {
        texture.magFilter = THREE.LinearFilter;
        texture.minFilter = THREE.LinearFilter;
        texture.mapping = THREE.CubeReflectionMapping;
        materials[0].needsUpdate = true;
      });

  var cubemap2 = loader.load('textures/compressed/Mountains_argb_mip.dds',
                             function(texture) {
                               texture.magFilter = THREE.LinearFilter;
                               texture.minFilter = THREE.LinearFilter;
                               texture.mapping = THREE.CubeReflectionMapping;
                               materials[4].needsUpdate = true;
                             });

  var cubemap3 = loader.load('textures/compressed/Mountains_argb_nomip.dds',
                             function(texture) {
                               texture.magFilter = THREE.LinearFilter;
                               texture.minFilter = THREE.LinearFilter;
                               texture.mapping = THREE.CubeReflectionMapping;
                               materials[5].needsUpdate = true;
                             });

  var materials = [];
  // 0
  materials.push(new THREE.MeshBasicMaterial({map : map1, envMap : cubemap1}));
  materials.push(new THREE.MeshBasicMaterial({map : map2}));
  materials.push(new THREE.MeshBasicMaterial(
      {map : map3, alphaTest : 0.5, side : THREE.DoubleSide}));
  materials.push(new THREE.MeshBasicMaterial({
    map : map4,
    side : THREE.DoubleSide,
    blending : THREE.AdditiveBlending,
    depthTest : false,
    transparent : true
  }));
  materials.push(new THREE.MeshBasicMaterial({envMap : cubemap2}));
  materials.push(new THREE.MeshBasicMaterial({envMap : cubemap3}));
  materials.push(new THREE.MeshBasicMaterial({map : map5}));
  materials.push(new THREE.MeshBasicMaterial({map : map6}));
  // 7

  /* Load in PVR Textures */

  var onCube1Loaded = function(texture) {
    texture.magFilter = THREE.LinearFilter;
    texture.minFilter = THREE.LinearFilter;
    texture.mapping = THREE.CubeReflectionMapping;
    materials[13].needsUpdate = true;
  };
  var onCube2Loaded = function(texture) {
    texture.magFilter = THREE.LinearFilter;
    // texture.minFilter = THREE.LinearMipMapNearestFilter;
    texture.minFilter = THREE.LinearFilter;
    texture.mapping = THREE.CubeReflectionMapping;
    materials[14].needsUpdate = true;
  };

  loader = new THREE.PVRLoader();
  var disturb_4bpp_rgb =
      loader.load('textures/compressed/disturb_4bpp_rgb.pvr');
  var disturb_4bpp_rgb_v3 =
      loader.load('textures/compressed/disturb_4bpp_rgb_v3.pvr');
  var disturb_4bpp_rgb_mips =
      loader.load('textures/compressed/disturb_4bpp_rgb_mips.pvr');
  var disturb_2bpp_rgb =
      loader.load('textures/compressed/disturb_2bpp_rgb.pvr');
  var flare_4bpp_rgba = loader.load('textures/compressed/flare_4bpp_rgba.pvr');
  var flare_2bpp_rgba = loader.load('textures/compressed/flare_2bpp_rgba.pvr');
  var park3_cube_nomip_4bpp_rgb = loader.load(
      'textures/compressed/park3_cube_nomip_4bpp_rgb.pvr', onCube1Loaded);
  var park3_cube_mip_2bpp_rgb_v3 = loader.load(
      'textures/compressed/park3_cube_mip_2bpp_rgb_v3.pvr', onCube2Loaded);

  disturb_2bpp_rgb.minFilter = disturb_2bpp_rgb.magFilter =
      flare_4bpp_rgba.minFilter = flare_4bpp_rgba.magFilter =
          disturb_4bpp_rgb.minFilter = disturb_4bpp_rgb.magFilter =
              disturb_4bpp_rgb_v3.minFilter = disturb_4bpp_rgb_v3.magFilter =
                  flare_2bpp_rgba.minFilter = flare_2bpp_rgba.magFilter =
                      THREE.LinearFilter;

  // 8
  materials.push(new THREE.MeshBasicMaterial({map : disturb_4bpp_rgb}));
  materials.push(new THREE.MeshBasicMaterial({map : disturb_4bpp_rgb_mips}));
  materials.push(new THREE.MeshBasicMaterial({map : disturb_2bpp_rgb}));
  materials.push(new THREE.MeshBasicMaterial({
    map : flare_4bpp_rgba,
    side : THREE.DoubleSide,
    depthTest : false,
    transparent : true
  }));
  materials.push(new THREE.MeshBasicMaterial({
    map : flare_2bpp_rgba,
    side : THREE.DoubleSide,
    depthTest : false,
    transparent : true
  }));
  materials.push(
      new THREE.MeshBasicMaterial({envMap : park3_cube_nomip_4bpp_rgb}));
  materials.push(
      new THREE.MeshBasicMaterial({envMap : park3_cube_mip_2bpp_rgb_v3}));
  materials.push(new THREE.MeshBasicMaterial({map : disturb_4bpp_rgb_v3}));
  // 15

  var startX = -600;
  var startY = -200;
  var delta = 100;
  var x = startX, y = startY;
  for (var i = 0; i < materials.length; i++) {
    var mesh = new THREE.Mesh(geometry, materials[i]);
    mesh.position.x = x;
    mesh.position.y = y;
    scene.add(mesh);
    meshes.push(mesh);

    x += delta;
    if (Math.abs(x + startX) < 50) {
      y += delta;
      x = startX;
    }
  }

  renderer = new THREE.WebGLRenderer({antialias : false});
  renderer.setPixelRatio(1);
  renderer.setSize(256, 256);
  document.body.appendChild(renderer.domElement);
}

function animate() {

  requestAnimationFrame(animate);

  var time = Date.now() * 0.001;

  for (var i = 0; i < meshes.length; i++) {

    var mesh = meshes[i];
    mesh.rotation.x = time;
    mesh.rotation.y = time;
  }

  renderer.render(scene, camera);
}